/*********************************************************************************************************
* 模块名称: PackUnpack.cpp
* 使用说明: 打包解包模块
* 摘    要: 类源文件
* 当前版本: 1.0.0
* 作    者: Leyutek(COPYRIGHT 2018 - 2021 Leyutek. All rights reserved.)
* 完成日期: 2021年01月22日
* 内    容: 
* 注    意: none                                                                  
**********************************************************************************************************
* 取代版本: 
* 作    者:
* 完成日期: 
* 修改内容:
* 修改文件: 
*********************************************************************************************************/

/*********************************************************************************************************
*                                              包含头文件
*********************************************************************************************************/
#include "pch.h"
#include "PackUnpack.h"
#include <iostream>
using namespace std;

/*********************************************************************************************************
*                                               全局变量
*********************************************************************************************************/

/*********************************************************************************************************
*                                               内部变量
*********************************************************************************************************/

/*********************************************************************************************************
*                                              成员函数实现
*********************************************************************************************************/
/*********************************************************************************************************
* 函数名称: CPackUnpack
* 函数功能:	构造函数
* 输入参数:	void
* 输出参数:	void	
* 返 回 值: void
* 创建日期: 2021年01月22日
* 注    意: 
*********************************************************************************************************/
CPackUnpack::CPackUnpack()
{
	InitPackUnpack();
}

/*********************************************************************************************************
* 函数名称: ~CPackUnpack
* 函数功能:	析构函数
* 输入参数:	void
* 输出参数:	void	
* 返 回 值: void
* 创建日期: 2021年01月22日
* 注    意: 
*********************************************************************************************************/
CPackUnpack::~CPackUnpack()
{
	
}

/*********************************************************************************************************
* 函数名称: InitPackUnpack
* 函数功能:	初始化打包解包模块
* 输入参数:	void
* 输出参数:	void	
* 返 回 值: void
* 创建日期: 2021年01月22日
* 注    意: 
*********************************************************************************************************/
void CPackUnpack::InitPackUnpack()
{
	int i;
	mRestByteNum = 0;
	mPack.id = 0;
	mPack.id2 = 0;
	for(i = 0; i < 6; i++)
	{
		mPack.data[i] = 0;
	}
	mPackLen = 0;
	mGotPackId = 0;
}

/*********************************************************************************************************
* 函数名称: PackData
* 函数功能:	实现数据的打包
* 输入参数:	pack-待打包的数据结构体
* 输出参数:	void	
* 返 回 值: void
* 创建日期: 2021年01月22日
* 注    意: 
*********************************************************************************************************/
void CPackUnpack::PackData(PacketFrame* pack)
{
	if(pack->id < 0x80)
	{
		PackWithCheckSum(&pack->buffer[0]);
	}
}

/*********************************************************************************************************
* 函数名称: UnpackData
* 函数功能:	实现数据的解包
* 输入参数:	pack-待解包的数据结构体
* 输出参数:	void	
* 返 回 值: 1-解包成功，0-解包失败
* 创建日期: 2021年01月22日
* 注    意: 
*********************************************************************************************************/
BOOL CPackUnpack::UnpackData(UCHAR* data)
{
	int i;
	BOOL findPack = FALSE;
	UCHAR currChar;

	//重复直到接收缓冲区中没有数据
	for(i = 0; i < 10; i++)
	{
		currChar = *data++; //取出单个字节 
		//接收到数据包ID
		if(mGotPackId)
		{
			//当前字节是有效的分组数据（包数据必须大于或等于0x80）
			if(0x80 <= currChar)
			{
				//数据包中的数据从第二字节开始存储，因为第一字节是包ID
				mPack.buffer[mPackLen] = currChar; 
				mPackLen++;     //包长自增
				mRestByteNum--; //剩余字节数自减

				//整个数据包被接收  (包长必须为10)
				if(0 >= mRestByteNum && 10 == mPackLen)
				{
					findPack = UnpackWithCheckSum(&mPack.buffer[0]);

					if(findPack == TRUE)
					{
						//SetUnPackData();
					}

					mGotPackId = 0;	//清除获取到的包ID标志，等待重新判断下一个数据包
				}
			}
			else
			{
				mGotPackId = 0; //表示出错
			}
		}
		else if(currChar < 0x80)  //当前检测到的是包ID
		{
			mRestByteNum = 9;  //剩余包长为9（减去包ID）
			mPackLen     = 1;  //尚未接收到包ID即表示包长为1
			mPack.id     = currChar; //表示已经接收到包ID
			mGotPackId   = 1;  //表示已经接收到包ID
		}
	}
	return findPack;
}

/*********************************************************************************************************
* 函数名称: PackWithCheckSum
* 函数功能:	实现数据带校验和打包
* 输入参数:	pack-待打包的数据
* 输出参数:	void	
* 返 回 值: void
* 创建日期: 2021年01月22日
* 注    意: 
*********************************************************************************************************/
void CPackUnpack::PackWithCheckSum(UCHAR* pack)
{
	int i;
	UCHAR dataHead; //数据头,在数据包的第二个位置，即ID之后
	UCHAR checkSum; //数据校验和，在数据包的最后一个位置
	checkSum = *pack;  //取出ID，加到校验和
    dataHead = 0;         //数据头清零
	for (i = 8; i > 1; i--) //数据包长度固定为10
	{
		//数据头左移,后面的数据的最高位位于dataHead的靠左
		dataHead <<= 1;
		//对数据进行最高位置1处理
		*(pack + i) = *(pack + i - 1) | 0x80;
		
		//数据加到校验和
		checkSum += *(pack + i);
		
		//取出原始数据的最高位，与dataHead相或
		dataHead |= (*(pack + i - 1) & 0x80) >> 7;
	}
	//数据头在数据包的第二个位置，仅次于包头，数据头的最高位也要置1
	*(pack + 1) = dataHead | 0x80;

	//将数据头加到校验和
	checkSum += *(pack + 1);

	//校验和的最高位也要置为1
	*(pack + 9) = checkSum | 0x80;
}

/*********************************************************************************************************
* 函数名称: UnpackWithCheckSum
* 函数功能:	实现数据带校验和解包
* 输入参数:	pack-待打包的数据
* 输出参数:	void	
* 返 回 值: 1-解包成功，0-解包失败
* 创建日期: 2021年01月22日
* 注    意: 
*********************************************************************************************************/
BOOL CPackUnpack::UnpackWithCheckSum(UCHAR* pack)
{
	UCHAR dataHead; //数据头
	int i;
	UCHAR checkSum;
	checkSum  = *pack;             //取出ID，加到校验和	
	dataHead = *(pack + 1);        //取出数据包的数据头，赋给dataHead
	checkSum += dataHead;          //将数据头加到校验和
	
	for(i = 1; i < 8; i++)
	{
		checkSum += *(pack + i + 1); //将数据依次加到校验和
		
		//还原有效的8位数据
		*(pack + i) = (*(pack + i + 1) & 0x7f) | ((dataHead & 0x1) << 7);
		
		dataHead >>= 1;               //数据头右移一位
	}
	
	//判断ID、数据头和数据求和的结果（低七位）是否与校验和的低七位相等，如果不等返回0
	if((checkSum & 0x7f) != ((*(pack + 9)) & 0x7f))
	{
		return FALSE;
	}
	
    return TRUE;
}

/*********************************************************************************************************
* 函数名称: GetUnpackRslt
* 函数功能:	获取解包后的结果
* 输入参数:	pack-待打包的数据
* 输出参数:	void	
* 返 回 值: 1-解包成功，0-解包失败
* 创建日期: 2021年01月22日
* 注    意: 
*********************************************************************************************************/
void CPackUnpack::GetUnpackRslt(PacketFrame* pack)
{
	*pack = mPack;
}
